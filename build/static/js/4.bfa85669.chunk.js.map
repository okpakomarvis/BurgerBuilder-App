{"version":3,"sources":["container/auth/auth.module.css","container/auth/auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/validation.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touch","password","minLength","isSignup","formSubmitHandler","event","controlName","updateControl","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchButtonHandler","prevState","this","buildingBurger","redirectAuth","onSetAuthredirectPath","formArray","key","push","id","config","form","map","formElement","isValid","shouldValidate","touched","changed","loading","authRedirect","isAuthenticated","to","className","Classes","error","data","message","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClass","InputElement","Invalid","join","onChange","options","option","displayValue","Label","label","rules","trim","length","maxLength","test","String","toLowerCase","isNumeric","isString","match","iscombine"],"mappings":"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","file":"static/js/4.bfa85669.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"auth_Auth__2q7Qd\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/spinner';\r\nimport Classes from './auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { checkValidity } from '../../shared/validation';\r\n\r\nclass Auth extends Component {\r\n    state ={\r\n        controls: {\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:' E-Mail Address',\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    isEmail: true\r\n                },\r\n                valid:false,\r\n                touch:false\r\n            },\r\n            password:{\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:' Password',\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength: 6\r\n                },\r\n                valid:false,\r\n                touch:false\r\n            }\r\n        },\r\n        isSignup: true\r\n    };\r\n    \r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.redirectAuth !=='/'){\r\n            this.props.onSetAuthredirectPath();\r\n        }\r\n    }\r\n     \r\n    formSubmitHandler = (event, controlName) =>{\r\n        \r\n        const updateControl = {\r\n           ...this.state.controls,\r\n           [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, \r\n                    this.state.controls[controlName].validation),\r\n                touch: true\r\n           }\r\n       };\r\n       this.setState({controls: updateControl});\r\n       \r\n    };\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,\r\n                    this.state.controls.password.value, this.state.isSignup);\r\n    };\r\n    switchButtonHandler = () =>{\r\n        this.setState(prevState =>{\r\n            return {\r\n                isSignup: !prevState.isSignup\r\n            };\r\n        });\r\n    };\r\n    render(){\r\n        let formArray =[];\r\n        // eslint-disable-next-line no-unused-vars\r\n        for(let key in this.state.controls){\r\n            formArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            })\r\n        }\r\n        let form = formArray.map(formElement =>{\r\n                        return(\r\n                            <Input key={formElement.id}\r\n                            elementType={formElement.config.elementType}\r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            isValid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation.required}\r\n                            touched={formElement.config.touch}\r\n                            changed={(event)=>this.formSubmitHandler(event, formElement.id)}\r\n                            />\r\n                        )\r\n               \r\n                    });\r\n        if(this.props.loading){\r\n            form = <Spinner />;\r\n        }\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect = <Redirect to={this.props.redirectAuth} />;\r\n        }\r\n        return(\r\n            <div className={Classes.Auth}>\r\n                {authRedirect}\r\n                {this.props.error ? <p>{this.props.error.data.error.message}</p>: null}\r\n                <form onSubmit={this.submitHandler}>\r\n                {form}\r\n                <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button btnType=\"Danger\"\r\n                clicked={this.switchButtonHandler}\r\n                >SWITCH TO  {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        redirectAuth: state.auth.authRedirect\r\n    }\r\n};\r\nconst mapToStateDispatch = dispatch => {\r\n    return{\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthredirectPath: ()=> dispatch(actions.redirectAuthpath('/'))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapToStateDispatch)(Auth);","import React from 'react';\r\nimport Classes from './Input.module.css';\r\n\r\nconst Input = props =>{\r\n    let inputElement =null;\r\n    let inputClass = [Classes.InputElement];\r\n    if(props.isValid && props.shouldValidate && props.touched){\r\n        inputClass.push(Classes.Invalid);\r\n    }\r\n    switch(props.elementType){\r\n        case('input'):\r\n        inputElement  =<input className={inputClass.join(' ')} \r\n        {...props.elementConfig} onChange={props.changed} value={props.value}/>;\r\n        break;\r\n        case('textarea'):\r\n        inputElement = <textarea className={inputClass.join(' ')} \r\n        {...props.elementConfig} onChange={props.changed} value={props.value}/>\r\n        break;\r\n        case('select'):\r\n        inputElement  =<select className={inputClass.join(' ')} onChange={props.changed}\r\n        value={props.value}>{props.elementConfig.options.map(option =>{\r\n            return (\r\n                <option key={option.value} \r\n                value ={option.value}>{option.displayValue}</option>\r\n            )\r\n        })}</select>;\r\n         break;\r\n        default:\r\n        inputElement =<input className={inputClass.join(' ')} \r\n        onChange={props.changed} {...props.elementConfig} value={props.value}/>\r\n    }\r\n    return (\r\n        <div className={Classes.Input}>\r\n            <label className={Classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1-gGs\",\"Label\":\"Input_Label__2FIp2\",\"InputElement\":\"Input_InputElement__1SMXk\",\"Invalid\":\"Input_Invalid__2vpVx\"};","export const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if(rules.required){\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n    if(rules.minLength){\r\n        isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if(rules.maxLength){\r\n        isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n    if(rules.isEmail){\r\n        // eslint-disable-next-line no-useless-escape\r\n        const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n    }\r\n    if(rules.isNumeric){\r\n        const pattern = /^-?(\\d+\\.?\\d*)$|(\\d*\\.?\\d+)$/;\r\n        isValid = pattern.test(value) && isValid;\r\n    }\r\n    if(rules.isString){\r\n        let regexp = /[a-d]/gi;\r\n        isValid =  value.match(regexp) && isValid;\r\n    }\r\n    if(rules.iscombine){\r\n        let regexp = /[a-d]/gi;\r\n        isValid =  value.match(regexp) && isValid;\r\n    }\r\n    return isValid;\r\n};"],"sourceRoot":""}