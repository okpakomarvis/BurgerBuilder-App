{"version":3,"sources":["components/Order/CheckoutSummary/checkoutSummary.module.css","container/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/checkoutSummary.js","container/Checkout/ContactData/ContactData.js","container/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","shared/validation.js"],"names":["module","exports","checkSummary","props","className","Classes","CheckoutSummary","style","width","display","justifyContent","overflow","Burger","ingredient","Button","btnType","clicked","checkoutCancel","checkoutContinue","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","iscombine","valid","touch","street","zipCode","minLength","maxLength","isNumeric","country","isString","email","isEmail","deliveryMethod","options","displayValue","formValid","purchaseOrderHandler","event","preventDefault","setState","loading","formData","key","order","ings","price","orderData","userId","orderSubmit","token","Noty","text","theme","timeout","sounds","sources","volume","show","formSubmitHandler","inputIdentifier","updateStatechange","updateForm","target","checkValidity","formisValid","formArray","this","push","id","config","form","onSubmit","map","formElement","Input","isValid","shouldValidate","touched","changed","disabled","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorhandler","axios","Checkout","checkoutCancelHandler","history","goBack","checkoutContinueHandler","replace","checkingredient","i","length","summary","to","purchaseRedirect","path","match","component","purchased","inputElement","inputClass","InputElement","Invalid","join","onChange","option","Label","label","rules","trim","test","String","toLowerCase"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,gBAAkB,2C,oBCApCD,EAAOC,QAAU,CAAC,YAAc,mC,iJCmBjBC,EAhBM,SAAAC,GAEjB,OACI,yBAAKC,UAAWC,IAAQC,iBACpB,yDACA,yBAAKC,MAAO,CAACC,MAAM,OAAOC,QAAQ,OAClCC,eAAe,SAAUC,SAAS,WAChC,kBAACC,EAAA,EAAD,CAAQC,WAAaV,EAAMU,cAE7B,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAChBC,QAASb,EAAMc,gBADf,UAEA,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAChBC,QAAUb,EAAMe,kBADhB,c,sqBCDNC,E,2MACFC,MAAO,CACHC,UAAU,CACFC,KAAK,CACDC,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,aAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,EACTC,WAAW,GAGfC,OAAM,EACNC,OAAM,GAEVC,OAAO,CACHV,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,UAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,GAEbE,OAAM,EACNC,OAAM,GAEVE,QAAS,CACLX,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,YAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,EACTM,UAAU,EACVC,UAAU,EACVC,WAAW,GAEfN,OAAM,EACNC,OAAM,GAEVM,QAAS,CACLf,YAAY,QACZC,cAAc,CACVC,KAAK,OACLC,YAAY,WAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,EACTU,UAAU,GAEdR,OAAM,EACNC,OAAM,GAEVQ,MAAM,CACFjB,YAAY,QACZC,cAAc,CACVC,KAAK,QACLC,YAAY,eAEhBC,MAAM,GACNC,WAAW,CACPC,UAAS,EACTY,SAAS,GAEbV,OAAM,EACNC,OAAM,GAEVU,eAAgB,CACZnB,YAAY,SACZC,cAAc,CACVmB,QAAQ,CACJ,CAAChB,MAAM,UAAYiB,aAAa,WAChC,CAACjB,MAAM,WAAaiB,aAAa,cAGzCjB,MAAM,GACNC,WAAW,CACPC,UAAS,GAEbE,OAAM,IAGlBc,WAAY,G,EAIhBC,qBAAuB,SAACC,GACpBA,EAAMC,iBAEN,EAAKC,SAAS,CAACC,SAAS,IACxB,IAAMC,EAAU,GAEhB,IAAI,IAAIC,KAAO,EAAKhC,MAAMC,UACtB8B,EAASC,GAAO,EAAKhC,MAAMC,UAAU+B,GAAKzB,MAE9C,IAAM0B,EAAO,CACTxC,WAAY,EAAKV,MAAMmD,KACvBC,MAAO,EAAKpD,MAAMoD,MAClBC,UAAWL,EACXM,OAAQ,EAAKtD,MAAMsD,QAEvB,EAAKtD,MAAMuD,YAAYL,EAAO,EAAKlD,MAAMwD,OACzC,IAAIC,IAAK,CACLC,KAAM,+BACNpC,KAAM,UACNqC,MAAO,OACPC,QAAS,IACTC,OAAO,CACHC,QAAS,CAAC,YACVC,OAAQ,KAGXC,Q,EAITC,kBAAoB,SAACrB,EAAOsB,GAEnB,IAAMC,EAAiB,KACjB,EAAKlD,MAAMC,WAEZkD,EAAU,KACTD,EAAkBD,IAEzBE,EAAW5C,MAAQoB,EAAMyB,OAAO7C,MAChC4C,EAAWxC,MAAQ0C,YAAcF,EAAW5C,MAAO4C,EAAW3C,YAC9D2C,EAAWvC,OAAQ,EACnBsC,EAAkBD,GAAmBE,EACrC,IAAIG,GAAc,EAElB,IAAI,IAAIL,KAAmBC,EACvBI,EAAcJ,EAAkBD,GAAiBtC,OAAS2C,EAE7D,EAAKzB,SAAS,CACX5B,UAAWiD,EACXzB,UAAY6B,K,wEAIf,IAAD,OACAC,EAAW,GAEf,IAAI,IAAIvB,KAAOwB,KAAKxD,MAAMC,UACtBsD,EAAUE,KAAK,CACXC,GAAG1B,EACH2B,OAAOH,KAAKxD,MAAMC,UAAU+B,KAGpC,IAAI4B,EACA,0BAAMC,SAAUL,KAAK9B,sBACZ6B,EAAUO,KAAI,SAAAC,GACX,OACI,kBAACC,EAAA,EAAD,CAAOhC,IAAK+B,EAAYL,GACxBvD,YAAa4D,EAAYJ,OAAOxD,YAChCC,cAAe2D,EAAYJ,OAAOvD,cAClCG,MAAOwD,EAAYJ,OAAOpD,MAC1B0D,SAAUF,EAAYJ,OAAOhD,MAC7BuD,eAAgBH,EAAYJ,OAAOnD,WAAWC,SAC9C0D,QAASJ,EAAYJ,OAAO/C,MAC5BwD,QAAS,SAACzC,GAAD,OAAS,EAAKqB,kBAAkBrB,EAAOoC,EAAYL,UAKpE,kBAAChE,EAAA,EAAD,CAAQC,QAAQ,UAChB0E,UAAWb,KAAKxD,MAAMyB,WADtB,UAOZ,OAHG+B,KAAKzE,MAAM+C,UACV8B,EAAK,kBAAC,IAAD,OAGL,yBAAK5E,UAAWC,IAAQc,aACpB,uDACC6D,O,GAtLSU,aA4MXC,eAhBS,SAAAvE,GACpB,MAAM,CACFkC,KAAMlC,EAAMwE,cAAc/E,WAC1B0C,MAAOnC,EAAMwE,cAAcC,WAC3B3C,QAAS9B,EAAMiC,MAAMH,QACrBS,MAAOvC,EAAM0E,KAAKnC,MAClBF,OAASrC,EAAM0E,KAAKrC,WAGH,SAAAsC,GACrB,MAAO,CACHrC,YAAa,SAACrC,EAAWsC,GAAZ,OAAqBoC,EAASC,IAAuB3E,EAAWsC,QAKtEgC,CAA2CM,YAAiB9E,EAAa+E,MCjNlFC,E,2MAcFC,sBAAwB,WACpB,EAAKjG,MAAMkG,QAAQC,U,EAEvBC,wBAA0B,WACtB,EAAKpG,MAAMkG,QAAQG,QAAQ,0BAC3B,IAAI5C,IAAK,CACLC,KAAM,oCACNpC,KAAM,UACNqC,MAAO,OACPC,QAAS,IACTC,OAAO,CACHC,QAAS,CAAC,YACVC,OAAQ,KAGXC,Q,mFA3BL,IAAIsC,EAAkB,GAEtB,IAAI,IAAIC,KAAK9B,KAAKzE,MAAMmD,KACO,IAAvBsB,KAAKzE,MAAMmD,KAAKoD,IACfD,EAAgB5B,KAAKD,KAAKzE,MAAMmD,KAAKoD,IAG3CD,EAAgBE,QAAS,GACxB/B,KAAKzE,MAAMkG,QAAQxB,KAAK,O,+BAsB5B,IAAI+B,EAAW,kBAAC,IAAD,CAAWC,GAAG,MAC7B,GAAGjC,KAAKzE,MAAMmD,KAAK,CACf,IAAMwD,EAAkBlC,KAAKzE,MAAM2G,iBAAkB,kBAAC,IAAD,CAAUD,GAAG,MAAU,KAC5ED,EACI,6BACCE,EACD,kBAAC,EAAD,CACCjG,WAAa+D,KAAKzE,MAAMmD,KACxBrC,eAAiB2D,KAAKwB,sBACtBlF,iBAAmB0D,KAAK2B,0BACxB,kBAAC,IAAD,CAAOQ,KAAMnC,KAAKzE,MAAM6G,MAAMD,KAAO,gBACrCE,UAAW9F,KAIpB,OAAQyF,M,GA/COlB,aA6DRC,uBAPS,SAAAvE,GACpB,MAAM,CACFkC,KAAMlC,EAAMwE,cAAc/E,WAC1BiG,iBAAkB1F,EAAMiC,MAAM6D,aAIvBvB,CAAyBQ,I,gCCtExC,qCAuCef,IApCD,SAAAjF,GACV,IAAIgH,EAAc,KACdC,EAAa,CAAC/G,IAAQgH,cAI1B,OAHGlH,EAAMkF,SAAWlF,EAAMmF,gBAAkBnF,EAAMoF,SAC9C6B,EAAWvC,KAAKxE,IAAQiH,SAErBnH,EAAMoB,aACT,IAAK,QACL4F,EAAe,yCAAO/G,UAAWgH,EAAWG,KAAK,MAC7CpH,EAAMqB,cADK,CACUgG,SAAUrH,EAAMqF,QAAS7D,MAAOxB,EAAMwB,SAC/D,MACA,IAAK,WACLwF,EAAe,4CAAU/G,UAAWgH,EAAWG,KAAK,MAChDpH,EAAMqB,cADK,CACUgG,SAAUrH,EAAMqF,QAAS7D,MAAOxB,EAAMwB,SAC/D,MACA,IAAK,SACLwF,EAAe,4BAAQ/G,UAAWgH,EAAWG,KAAK,KAAMC,SAAUrH,EAAMqF,QACxE7D,MAAOxB,EAAMwB,OAAQxB,EAAMqB,cAAcmB,QAAQuC,KAAI,SAAAuC,GACjD,OACI,4BAAQrE,IAAKqE,EAAO9F,MACpBA,MAAQ8F,EAAO9F,OAAQ8F,EAAO7E,kBAGrC,MACD,QACAuE,EAAc,yCAAO/G,UAAWgH,EAAWG,KAAK,KAChDC,SAAUrH,EAAMqF,SAAarF,EAAMqB,cADrB,CACoCG,MAAOxB,EAAMwB,SAEnE,OACI,yBAAKvB,UAAWC,IAAQ+E,OACpB,2BAAOhF,UAAWC,IAAQqH,OAAQvH,EAAMwH,OACvCR,K,mBCjCbnH,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,gCCDjI,kCAAO,IAAMwE,EAAgB,SAAC9C,EAAOiG,GACjC,IAAIvC,GAAU,EAUd,GATGuC,EAAM/F,WACLwD,EAA2B,KAAjB1D,EAAMkG,QAAiBxC,GAElCuC,EAAMzF,YACLkD,EAAU1D,EAAMgF,QAAUiB,EAAMzF,WAAakD,GAE9CuC,EAAMxF,YACLiD,EAAU1D,EAAMgF,QAAUiB,EAAMxF,WAAaiD,GAE9CuC,EAAMnF,QAAQ,CAGb4C,EADgB,0JACEyC,KAAKC,OAAOpG,GAAOqG,gBAAkB3C,EAE3D,GAAGuC,EAAMvF,UAAU,CAEfgD,EADgB,+BACEyC,KAAKnG,IAAU0D,EAErC,GAAGuC,EAAMrF,SAAS,CAEd8C,EAAW1D,EAAMqF,MADJ,YACqB3B,EAEtC,GAAGuC,EAAM9F,UAAU,CAEfuD,EAAW1D,EAAMqF,MADJ,YACqB3B,EAEtC,OAAOA","file":"static/js/3.90d48c49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"checkoutSummary_CheckoutSummary__2taIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3Efi_\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport Classes from './checkoutSummary.module.css';\r\nconst checkSummary = props =>{\r\n\r\n    return(\r\n        <div className={Classes.CheckoutSummary}>\r\n            <h1>We hope it taste's well !</h1>\r\n            <div style={{width:'100%',display:'flex',\r\n            justifyContent:'center', overflow:'hidden'}}>\r\n              <Burger ingredient ={props.ingredient} />   \r\n            </div>\r\n            <Button btnType=\"Danger\" \r\n            clicked={props.checkoutCancel}>CANCEL</Button>\r\n            <Button btnType=\"Success\" \r\n            clicked ={props.checkoutContinue}>CONTINUE</Button>\r\n        </div>\r\n    )\r\n}\r\nexport default checkSummary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Classes from './ContactData.module.css';\r\nimport axios from '../../../axios';\r\nimport Spinner from '../../../components/UI/Spinner/spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorhandler  from '../../../hoc/withErrHandler/withErrHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { checkValidity } from '../../../shared/validation';\r\nimport Noty from 'noty';\r\nimport \"noty/src/noty.scss\";\r\nimport \"noty/src/themes/mint.scss\";\r\n\r\nclass ContactData extends Component{\r\n    state= {\r\n        orderForm:{\r\n                name:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Your Name'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true,\r\n                        iscombine: true\r\n                        \r\n                    },\r\n                    valid:false,\r\n                    touch:false\r\n                },\r\n                street:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Street'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true\r\n                    },\r\n                    valid:false,\r\n                    touch:false\r\n                },\r\n                zipCode: {\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Zip Code'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true,\r\n                        minLength:5,\r\n                        maxLength:5,\r\n                        isNumeric: true\r\n                    },\r\n                    valid:false,\r\n                    touch:false\r\n                },\r\n                country: {\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Country'\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true,\r\n                        isString: true\r\n                    },\r\n                    valid:false,\r\n                    touch:false\r\n                },\r\n                email:{\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'email',\r\n                        placeholder:'Your E-Mail',\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:true,\r\n                        isEmail: true\r\n                    },\r\n                    valid:false,\r\n                    touch:false\r\n                },\r\n                deliveryMethod: {\r\n                    elementType:'select',\r\n                    elementConfig:{\r\n                        options:[\r\n                            {value:'fastest' , displayValue:'Fastest'},\r\n                            {value:'cheapest' , displayValue:'Cheapest'},\r\n                        ]\r\n                    },\r\n                    value:'',\r\n                    validation:{\r\n                        required:false\r\n                    },\r\n                    valid:false\r\n                }\r\n        },\r\n        formValid : false\r\n    \r\n    }\r\n    \r\n    purchaseOrderHandler = (event) =>{\r\n        event.preventDefault();\r\n            //alert('you continued !');\r\n        this.setState({loading: true});\r\n        const formData ={};\r\n        // eslint-disable-next-line no-unused-vars\r\n        for(let key in this.state.orderForm){\r\n            formData[key] = this.state.orderForm[key].value;\r\n        }\r\n        const order ={\r\n            ingredient: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.orderSubmit(order, this.props.token);\r\n        new Noty({  \r\n            text: \"Burger Purchased Successfull\",\r\n            type: \"warning\",\r\n            theme:\t\"mint\",\r\n            timeout: 3000,\r\n            sounds:{\r\n                sources: ['some.wav'],\r\n                volume: 5\r\n            }\r\n\r\n          }).show();\r\n       \r\n    }\r\n    \r\n    formSubmitHandler = (event, inputIdentifier) =>{\r\n        \r\n             const updateStatechange = {\r\n                ...this.state.orderForm\r\n            };\r\n            const updateForm = {\r\n                ...updateStatechange[inputIdentifier] \r\n            };\r\n            updateForm.value = event.target.value;\r\n            updateForm.valid = checkValidity(updateForm.value, updateForm.validation);\r\n            updateForm.touch = true;\r\n            updateStatechange[inputIdentifier] = updateForm;\r\n            let formisValid = true;\r\n            // eslint-disable-next-line no-unused-vars\r\n            for(let inputIdentifier in updateStatechange){\r\n                formisValid = updateStatechange[inputIdentifier].valid && formisValid;\r\n            }\r\n             this.setState({\r\n                orderForm: updateStatechange,\r\n                formValid : formisValid\r\n            });  \r\n    }\r\n   \r\n    render(){\r\n        let formArray =[];\r\n        // eslint-disable-next-line no-unused-vars\r\n        for(let key in this.state.orderForm){\r\n            formArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            })\r\n        }\r\n        let form =(\r\n            <form onSubmit={this.purchaseOrderHandler}>\r\n                    {formArray.map(formElement =>{\r\n                        return(\r\n                            <Input key={formElement.id}\r\n                            elementType={formElement.config.elementType}\r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            isValid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation.required}\r\n                            touched={formElement.config.touch}\r\n                            changed={(event)=>this.formSubmitHandler(event, formElement.id)}\r\n                            />\r\n                        )\r\n                    })}\r\n                    \r\n                    <Button btnType=\"Success\" \r\n                    disabled={!this.state.formValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if(this.props.loading){\r\n            form=<Spinner />\r\n        }\r\n        return(\r\n            <div className={Classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToprops = state =>{\r\n    return{\r\n        ings: state.burgerBuilder.ingredient,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId : state.auth.userId\r\n    }\r\n};\r\nconst mapStateDispatch = dispatch =>{\r\n    return {\r\n        orderSubmit: (orderForm, token)=> dispatch(actions.purchaseBurger(orderForm, token))\r\n    };\r\n\r\n};\r\n\r\nexport default connect(mapStateToprops, mapStateDispatch)(withErrorhandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport { Route , Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/checkoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nimport Noty from 'noty';\r\nimport \"noty/src/noty.scss\";\r\nimport \"noty/src/themes/mint.scss\";\r\n\r\nclass Checkout extends Component {\r\n    componentDidMount(){\r\n        let checkingredient = [];\r\n        // eslint-disable-next-line no-unused-vars\r\n        for(let i in this.props.ings){\r\n             if(this.props.ings[i] !== 0){\r\n                 checkingredient.push(this.props.ings[i]);\r\n             }\r\n        }\r\n        if(checkingredient.length <=0){\r\n            this.props.history.push('/');\r\n        }\r\n        \r\n    }\r\n    checkoutCancelHandler = () =>{\r\n        this.props.history.goBack();\r\n    }\r\n    checkoutContinueHandler = () =>{\r\n        this.props.history.replace('/checkout/contact-data');\r\n        new Noty({  \r\n            text: \"Please filled out Contact details\",\r\n            type: \"success\",\r\n            theme:\t\"mint\",\r\n            timeout: 3000,\r\n            sounds:{\r\n                sources: ['some.wav'],\r\n                volume: 5\r\n            }\r\n\r\n          }).show();\r\n    }\r\n    render(){\r\n        let summary =  <Redirect  to=\"/\"/> ;\r\n        if(this.props.ings){\r\n            const purchaseRedirect =this.props.purchaseRedirect? <Redirect to=\"/\" />  : null;\r\n            summary = (\r\n                <div>\r\n                {purchaseRedirect}\r\n                <CheckoutSummary  \r\n                 ingredient ={this.props.ings}\r\n                 checkoutCancel ={this.checkoutCancelHandler}\r\n                 checkoutContinue ={this.checkoutContinueHandler}/> \r\n                 <Route path={this.props.match.path + '/contact-data'} \r\n                 component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return  summary;\r\n                 \r\n            \r\n        \r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        ings: state.burgerBuilder.ingredient,\r\n        purchaseRedirect: state.order.purchased\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport Classes from './Input.module.css';\r\n\r\nconst Input = props =>{\r\n    let inputElement =null;\r\n    let inputClass = [Classes.InputElement];\r\n    if(props.isValid && props.shouldValidate && props.touched){\r\n        inputClass.push(Classes.Invalid);\r\n    }\r\n    switch(props.elementType){\r\n        case('input'):\r\n        inputElement  =<input className={inputClass.join(' ')} \r\n        {...props.elementConfig} onChange={props.changed} value={props.value}/>;\r\n        break;\r\n        case('textarea'):\r\n        inputElement = <textarea className={inputClass.join(' ')} \r\n        {...props.elementConfig} onChange={props.changed} value={props.value}/>\r\n        break;\r\n        case('select'):\r\n        inputElement  =<select className={inputClass.join(' ')} onChange={props.changed}\r\n        value={props.value}>{props.elementConfig.options.map(option =>{\r\n            return (\r\n                <option key={option.value} \r\n                value ={option.value}>{option.displayValue}</option>\r\n            )\r\n        })}</select>;\r\n         break;\r\n        default:\r\n        inputElement =<input className={inputClass.join(' ')} \r\n        onChange={props.changed} {...props.elementConfig} value={props.value}/>\r\n    }\r\n    return (\r\n        <div className={Classes.Input}>\r\n            <label className={Classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1-gGs\",\"Label\":\"Input_Label__2FIp2\",\"InputElement\":\"Input_InputElement__1SMXk\",\"Invalid\":\"Input_Invalid__2vpVx\"};","export const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    if(rules.required){\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n    if(rules.minLength){\r\n        isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if(rules.maxLength){\r\n        isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n    if(rules.isEmail){\r\n        // eslint-disable-next-line no-useless-escape\r\n        const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        isValid = pattern.test(String(value).toLowerCase()) && isValid;\r\n    }\r\n    if(rules.isNumeric){\r\n        const pattern = /^-?(\\d+\\.?\\d*)$|(\\d*\\.?\\d+)$/;\r\n        isValid = pattern.test(value) && isValid;\r\n    }\r\n    if(rules.isString){\r\n        let regexp = /[a-d]/gi;\r\n        isValid =  value.match(regexp) && isValid;\r\n    }\r\n    if(rules.iscombine){\r\n        let regexp = /[a-d]/gi;\r\n        isValid =  value.match(regexp) && isValid;\r\n    }\r\n    return isValid;\r\n};"],"sourceRoot":""}